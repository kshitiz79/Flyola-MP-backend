{
    "sourceFile": "src/controller/flightScheduleController.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1746000822306,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1746000842315,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -197,39 +197,9 @@\n     res.status(500).json({ error: 'Failed to update flight stops' });\n   }\n }\n \n-async function findSchedules() {\n-  try {\n-    const schedules = await models.FlightSchedule.findAll({\n-      where: {\n-        // Optionally filter by date range or active schedules\n-        // Example: valid_from: { [models.Sequelize.Op.lte]: '2025-05-01' },\n-        // valid_to: { [models.Sequelize.Op.gte]: '2025-05-01' }\n-      },\n-      include: [\n-        { model: models.Airport, as: 'departureAirport' },\n-        { model: models.Airport, as: 'arrivalAirport' },\n-      ],\n-    });\n-    console.log(\n-      schedules.map((s) => ({\n-        id: s.id,\n-        flight_no: s.flight_no,\n-        departure_airport_id: s.departure_airport_id,\n-        arrival_airport_id: s.arrival_airport_id,\n-        departure_time: s.departure_time,\n-        arrival_time: s.arrival_time,\n-        valid_from: s.valid_from,\n-        valid_to: s.valid_to,\n-      }))\n-    );\n-  } catch (err) {\n-    console.error('Error fetching schedules:', err);\n-  }\n-}\n \n-findSchedules();\n \n \n \n \n"
                }
            ],
            "date": 1746000822306,
            "name": "Commit-0",
            "content": "const { format, toZonedTime } = require('date-fns-tz');\nconst { sumSeats } = require('../utils/seatUtils');\nconst getModels = () => require('../model');\n\nasync function getFlightSchedules(req, res) {\n  const models = getModels();\n  const isUserRequest = req.query.user === 'true';\n  const monthQuery = req.query.month;\n  try {\n    const where = isUserRequest ? { status: 1 } : {};\n    const rows = await models.FlightSchedule.findAll({\n      where,\n      include: [{ model: models.Flight }],\n    });\n\n    let output = [];\n    if (monthQuery) {\n      const [year, month] = monthQuery.split('-').map(Number);\n      const startDate = toZonedTime(new Date(year, month - 1, 1), 'Asia/Kolkata');\n      const endDate = toZonedTime(new Date(year, month, 0), 'Asia/Kolkata');\n\n      for (let d = new Date(startDate); d <= endDate; d.setDate(d.getDate() + 1)) {\n        const departure_date = format(d, 'yyyy-MM-dd', { timeZone: 'Asia/Kolkata' });\n        const weekday = format(d, 'EEEE', { timeZone: 'Asia/Kolkata' });\n\n        for (const schedule of rows) {\n          const flight = schedule.Flight;\n          if (!flight || flight.departure_day !== weekday) continue;\n\n          let viaStopIds = [];\n          try {\n            viaStopIds = schedule.via_stop_id ? JSON.parse(schedule.via_stop_id) : [];\n            viaStopIds = viaStopIds.filter(id => id && Number.isInteger(id) && id !== 0);\n          } catch {}\n\n          let availableSeats = 0;\n          try {\n            availableSeats = await sumSeats({\n              models,\n              schedule_id: schedule.id,\n              bookDate: departure_date,\n              transaction: null,\n            });\n          } catch {}\n\n          output.push({\n            ...schedule.toJSON(),\n            via_stop_id: JSON.stringify(viaStopIds),\n            departure_date,\n            availableSeats,\n          });\n        }\n      }\n    } else {\n      const bookDate = req.query.date || format(new Date(), 'yyyy-MM-dd', { timeZone: 'Asia/Kolkata' });\n      const results = await Promise.all(\n        rows.map(async schedule => {\n          const flight = schedule.Flight;\n          if (!flight) return null;\n\n          let viaStopIds = [];\n          try {\n            viaStopIds = schedule.via_stop_id ? JSON.parse(schedule.via_stop_id) : [];\n            viaStopIds = viaStopIds.filter(id => id && Number.isInteger(id) && id !== 0);\n          } catch {}\n\n          let availableSeats = 0;\n          try {\n            availableSeats = await sumSeats({\n              models,\n              schedule_id: schedule.id,\n              bookDate,\n              transaction: null,\n            });\n          } catch {}\n\n          return {\n            ...schedule.toJSON(),\n            via_stop_id: JSON.stringify(viaStopIds),\n            departure_date: bookDate,\n            availableSeats,\n          };\n        })\n      );\n      output = results.filter(item => item);\n    }\n\n    res.json(output);\n  } catch (err) {\n    console.error('getFlightSchedules error:', err);\n    res.status(500).json({ error: 'Database query failed', details: err.message });\n  }\n}\n\nasync function addFlightSchedule(req, res) {\n  const models = getModels();\n  const { via_stop_id, ...body } = req.body;\n  try {\n    const validViaStopIds = via_stop_id\n      ? JSON.parse(via_stop_id).filter(id => id && Number.isInteger(id) && id !== 0)\n      : [];\n\n    const schedule = await models.FlightSchedule.create({\n      ...body,\n      via_stop_id: JSON.stringify(validViaStopIds),\n    });\n    res.status(201).json({ id: schedule.id });\n  } catch (err) {\n    console.error('addFlightSchedule error:', err);\n    res.status(500).json({ error: 'Failed to add flight schedule' });\n  }\n}\n\nasync function updateFlightSchedule(req, res) {\n  const models = getModels();\n  const { via_stop_id, ...body } = req.body;\n  try {\n    const schedule = await models.FlightSchedule.findByPk(req.params.id);\n    if (!schedule) return res.status(404).json({ error: 'Not found' });\n\n    const validViaStopIds = via_stop_id\n      ? JSON.parse(via_stop_id).filter(id => id && Number.isInteger(id) && id !== 0)\n      : [];\n\n    await schedule.update({\n      ...body,\n      via_stop_id: JSON.stringify(validViaStopIds),\n    });\n    res.json({ message: 'Updated' });\n  } catch (err) {\n    console.error('updateFlightSchedule error:', err);\n    res.status(500).json({ error: 'Failed to update' });\n  }\n}\n\nasync function deleteFlightSchedule(req, res) {\n  const models = getModels();\n  try {\n    const schedule = await models.FlightSchedule.findByPk(req.params.id);\n    if (!schedule) return res.status(404).json({ error: 'Not found' });\n    await schedule.destroy();\n    res.json({ message: 'Deleted' });\n  } catch (err) {\n    console.error('deleteFlightSchedule error:', err);\n    res.status(500).json({ error: 'Failed to delete' });\n  }\n}\n\nasync function activateAllFlightSchedules(req, res) {\n  const models = getModels();\n  try {\n    await models.FlightSchedule.update({ status: 1 }, { where: {} });\n    res.json({ message: 'All flight schedules activated' });\n  } catch (err) {\n    console.error('activateAllFlightSchedules error:', err);\n    res.status(500).json({ error: 'Failed to activate all' });\n  }\n}\n\nasync function editAllFlightSchedules(req, res) {\n  const models = getModels();\n  const { price } = req.body;\n  if (!price || isNaN(price)) return res.status(400).json({ error: 'Invalid price' });\n  try {\n    await models.FlightSchedule.update(\n      { price: parseFloat(price) },\n      { where: {} }\n    );\n    res.json({ message: 'All flight schedules updated' });\n  } catch (err) {\n    console.error('editAllFlightSchedules error:', err);\n    res.status(500).json({ error: 'Failed to update all' });\n  }\n}\n\nasync function deleteAllFlightSchedules(req, res) {\n  const models = getModels();\n  try {\n    await models.FlightSchedule.destroy({ where: {} });\n    res.json({ message: 'All flight schedules deleted' });\n  } catch (err) {\n    console.error('deleteAllFlightSchedules error:', err);\n    res.status(500).json({ error: 'Failed to delete all' });\n  }\n}\n\nasync function updateFlightStops(req, res) {\n  const models = getModels();\n  const { flight_id, airport_stop_ids } = req.body;\n  try {\n    const flight = await models.Flight.findByPk(flight_id);\n    if (!flight) return res.status(404).json({ error: 'Flight not found' });\n    await flight.update({ airport_stop_ids: JSON.stringify(airport_stop_ids) });\n    res.json({ message: 'Flight stops updated' });\n  } catch (err) {\n    console.error('updateFlightStops error:', err);\n    res.status(500).json({ error: 'Failed to update flight stops' });\n  }\n}\n\nasync function findSchedules() {\n  try {\n    const schedules = await models.FlightSchedule.findAll({\n      where: {\n        // Optionally filter by date range or active schedules\n        // Example: valid_from: { [models.Sequelize.Op.lte]: '2025-05-01' },\n        // valid_to: { [models.Sequelize.Op.gte]: '2025-05-01' }\n      },\n      include: [\n        { model: models.Airport, as: 'departureAirport' },\n        { model: models.Airport, as: 'arrivalAirport' },\n      ],\n    });\n    console.log(\n      schedules.map((s) => ({\n        id: s.id,\n        flight_no: s.flight_no,\n        departure_airport_id: s.departure_airport_id,\n        arrival_airport_id: s.arrival_airport_id,\n        departure_time: s.departure_time,\n        arrival_time: s.arrival_time,\n        valid_from: s.valid_from,\n        valid_to: s.valid_to,\n      }))\n    );\n  } catch (err) {\n    console.error('Error fetching schedules:', err);\n  }\n}\n\nfindSchedules();\n\n\n\n\n\n\n\n\n\n\n\nmodule.exports = {\n  getFlightSchedules,\n  addFlightSchedule,\n  updateFlightSchedule,\n  deleteFlightSchedule,\n  activateAllFlightSchedules,\n  editAllFlightSchedules,\n  deleteAllFlightSchedules,\n  updateFlightStops,\n};\n"
        }
    ]
}