{
    "sourceFile": "src/controller/bookingController.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 3,
            "patches": [
                {
                    "date": 1746000157164,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1746000705061,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,9 +9,16 @@\n \n \n \n \n- \n+const models = require('../model');\n+const { sumSeats } = require('../utils/seatUtils');\n+const { v4: uuidv4 } = require('uuid');\n+const dayjs = require('dayjs');\n+\n+/**\n+ * Completes an IRCTC booking with integrated payment processing\n+ */\n exports.completeIrctcBooking = async (req, res) => {\n   const { bookedSeat, booking, billing, passengers, payment } = req.body;\n \n   // Log input\n@@ -41,8 +48,9 @@\n     'noOfPassengers',\n     'totalFare',\n     'bookedUserId',\n     'schedule_id',\n+    'bookDate',\n   ];\n   for (const f of bookingFields) {\n     if (!booking[f]) return res.status(400).json({ error: `Missing booking field: ${f}` });\n   }\n@@ -108,8 +116,10 @@\n         ...payment,\n         payment_status: paymentStatus,\n         payment_id: `IRCTC-PAY-${uuidv4().slice(0, 8)}`,\n         order_id: `IRCTC-ORDER-${uuidv4().slice(0, 8)}`,\n+        pay_mode: payment.payment_mode, // Map to Booking model field\n+        pay_amt: payment.payment_amount.toString(), // Map to Booking model field\n       };\n \n       // Create booking\n       const newBooking = await models.Booking.create(\n@@ -117,8 +127,12 @@\n           ...booking,\n           bookingStatus: 'CONFIRMED',\n           paymentStatus: paymentStatus,\n           bookingNo: booking.bookingNo || `IRCTC-BOOK-${uuidv4().slice(0, 8)}`,\n+          pay_mode: payment.payment_mode,\n+          pay_amt: payment.payment_amount.toString(),\n+          paymentId: paymentDetails.payment_id,\n+          transactionId: payment.transaction_id,\n         },\n         { transaction: t }\n       );\n \n@@ -180,12 +194,8 @@\n \n \n \n \n-\n-\n-\n-\n exports.completeBooking = async (req, res) => {\n   const { bookedSeat, booking, billing, payment, passengers } = req.body;\n \n   // Log input\n"
                },
                {
                    "date": 1746000711322,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,457 @@\n+const models = require('../model');\n+const { sumSeats } = require('../utils/seatUtils');\n+const { verifyPayment } = require('../utils/razorpay');\n+const { createPaymentUtil } = require('./paymentController');\n+const { v4: uuidv4 } = require('uuid');\n+const dayjs = require('dayjs');\n+\n+\n+\n+\n+\n+\n+\n+\n+/**\n+ * Completes an IRCTC booking with integrated payment processing\n+ */\n+exports.completeIrctcBooking = async (req, res) => {\n+  const { bookedSeat, booking, billing, passengers, payment } = req.body;\n+\n+  // Log input\n+  console.log('completeIrctcBooking input:', { bookedSeat, booking, billing, passengers, payment });\n+\n+  // Validation\n+  if (\n+    !bookedSeat ||\n+    !booking ||\n+    !billing ||\n+    !payment ||\n+    !Array.isArray(passengers) ||\n+    passengers.length === 0\n+  ) {\n+    return res.status(400).json({ error: 'Missing required booking sections' });\n+  }\n+\n+  if (!dayjs(bookedSeat.bookDate, 'YYYY-MM-DD', true).isValid()) {\n+    return res.status(400).json({ error: 'Invalid bookDate format (YYYY-MM-DD)' });\n+  }\n+\n+  const bookingFields = [\n+    'pnr',\n+    'bookingNo',\n+    'contact_no',\n+    'email_id',\n+    'noOfPassengers',\n+    'totalFare',\n+    'bookedUserId',\n+    'schedule_id',\n+    'bookDate',\n+  ];\n+  for (const f of bookingFields) {\n+    if (!booking[f]) return res.status(400).json({ error: `Missing booking field: ${f}` });\n+  }\n+\n+  if (!billing.user_id) {\n+    return res.status(400).json({ error: 'Missing billing field: user_id' });\n+  }\n+\n+  const paymentFields = [\n+    'user_id',\n+    'payment_amount',\n+    'payment_mode',\n+    'transaction_id',\n+  ];\n+  for (const f of paymentFields) {\n+    if (!payment[f]) return res.status(400).json({ error: `Missing payment field: ${f}` });\n+  }\n+\n+  for (const p of passengers) {\n+    if (!p.name || !p.title || !p.type || typeof p.age !== 'number') {\n+      return res.status(400).json({ error: 'Missing passenger fields: name, title, type, age' });\n+    }\n+  }\n+\n+  if (!['IRCTC_GATEWAY', 'UPI', 'NET_BANKING'].includes(payment.payment_mode)) {\n+    return res.status(400).json({ error: 'Invalid payment_mode. Must be IRCTC_GATEWAY, UPI, or NET_BANKING' });\n+  }\n+\n+  try {\n+    let result;\n+    await models.sequelize.transaction(async (t) => {\n+      // Check available seats\n+      const seatsLeft = await sumSeats({\n+        models,\n+        schedule_id: bookedSeat.schedule_id,\n+        bookDate: bookedSeat.bookDate,\n+        transaction: t,\n+      });\n+      console.log('Seats left:', seatsLeft);\n+      if (seatsLeft < bookedSeat.booked_seat) {\n+        throw new Error(\n+          `Only ${seatsLeft} seat(s) left on ${bookedSeat.bookDate} for schedule ${bookedSeat.schedule_id}`\n+        );\n+      }\n+\n+      // Update or create booked seat record\n+      const [row, created] = await models.BookedSeat.findOrCreate({\n+        where: { schedule_id: bookedSeat.schedule_id, bookDate: bookedSeat.bookDate },\n+        defaults: { booked_seat: bookedSeat.booked_seat },\n+        transaction: t,\n+        lock: t.LOCK.UPDATE,\n+      });\n+      console.log('findOrCreate:', { created, row: row.toJSON() });\n+\n+      if (!row.isNewRecord) {\n+        await row.increment({ booked_seat: bookedSeat.booked_seat }, { transaction: t });\n+        console.log('After increment:', row.toJSON());\n+      }\n+\n+      // Process IRCTC payment (simplified for this example)\n+      const paymentStatus = 'SUCCESS'; // In real implementation, this would involve IRCTC payment gateway API\n+      const paymentDetails = {\n+        ...payment,\n+        payment_status: paymentStatus,\n+        payment_id: `IRCTC-PAY-${uuidv4().slice(0, 8)}`,\n+        order_id: `IRCTC-ORDER-${uuidv4().slice(0, 8)}`,\n+        pay_mode: payment.payment_mode, // Map to Booking model field\n+        pay_amt: payment.payment_amount.toString(), // Map to Booking model field\n+      };\n+\n+      // Create booking\n+      const newBooking = await models.Booking.create(\n+        {\n+          ...booking,\n+          bookingStatus: 'CONFIRMED',\n+          paymentStatus: paymentStatus,\n+          bookingNo: booking.bookingNo || `IRCTC-BOOK-${uuidv4().slice(0, 8)}`,\n+          pay_mode: payment.payment_mode,\n+          pay_amt: payment.payment_amount.toString(),\n+          paymentId: paymentDetails.payment_id,\n+          transactionId: payment.transaction_id,\n+        },\n+        { transaction: t }\n+      );\n+\n+      // Create billing record\n+      await models.Billing.create(\n+        { ...billing, user_id: booking.bookedUserId },\n+        { transaction: t }\n+      );\n+\n+      // Create payment record\n+      await models.Payment.create(\n+        { ...paymentDetails, booking_id: newBooking.id, user_id: booking.bookedUserId },\n+        { transaction: t }\n+      );\n+\n+      // Create passenger records\n+      await models.Passenger.bulkCreate(\n+        passengers.map((p) => ({\n+          bookingId: newBooking.id,\n+          title: p.title,\n+          name: p.name,\n+          dob: p.dob,\n+          age: p.age,\n+          type: p.type,\n+        })),\n+        { transaction: t }\n+      );\n+\n+      // Get updated seat counts\n+      const updatedSeatCounts = [\n+        {\n+          schedule_id: bookedSeat.schedule_id,\n+          bookDate: bookedSeat.bookDate,\n+          seatsLeft: await sumSeats({\n+            models,\n+            schedule_id: bookedSeat.schedule_id,\n+            bookDate: bookedSeat.bookDate,\n+            transaction: t,\n+          }),\n+        },\n+      ];\n+      console.log('Updated seat counts:', updatedSeatCounts);\n+\n+      result = { bookingId: newBooking.id, updatedSeatCounts, bookingNo: newBooking.bookingNo };\n+    });\n+\n+    return res.status(201).json(result);\n+  } catch (err) {\n+    console.error('completeIrctcBooking error:', err);\n+    return res.status(400).json({ error: err.message });\n+  }\n+};\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+exports.completeBooking = async (req, res) => {\n+  const { bookedSeat, booking, billing, payment, passengers } = req.body;\n+\n+  // Log input\n+  console.log('completeBooking input:', { bookedSeat, booking, billing, payment, passengers });\n+\n+  // Validation\n+  if (\n+    !bookedSeat ||\n+    !booking ||\n+    !billing ||\n+    !payment ||\n+    !Array.isArray(passengers) ||\n+    passengers.length === 0\n+  ) {\n+    return res.status(400).json({ error: 'Missing required booking sections' });\n+  }\n+  if (!dayjs(bookedSeat.bookDate, 'YYYY-MM-DD', true).isValid()) {\n+    return res.status(400).json({ error: 'Invalid bookDate format (YYYY-MM-DD)' });\n+  }\n+\n+  const bookingFields = [\n+    'pnr',\n+    'bookingNo',\n+    'contact_no',\n+    'email_id',\n+    'noOfPassengers',\n+    'totalFare',\n+    'bookedUserId',\n+    'schedule_id',\n+  ];\n+  for (const f of bookingFields) {\n+    if (!booking[f]) return res.status(400).json({ error: `Missing booking field: ${f}` });\n+  }\n+  if (!billing.user_id) {\n+    return res.status(400).json({ error: 'Missing billing field: user_id' });\n+  }\n+  const paymentFields = [\n+    'user_id',\n+    'payment_amount',\n+    'payment_status',\n+    'transaction_id',\n+    'payment_id',\n+    'payment_mode',\n+    'order_id',\n+  ];\n+  for (const f of paymentFields) {\n+    if (!payment[f]) return res.status(400).json({ error: `Missing payment field: ${f}` });\n+  }\n+\n+  for (const p of passengers) {\n+    if (!p.name || !p.title || !p.type || typeof p.age !== 'number') {\n+      return res.status(400).json({ error: 'Missing passenger fields: name, title, type, age' });\n+    }\n+  }\n+\n+  if (!['RAZORPAY', 'ADMIN'].includes(payment.payment_mode)) {\n+    return res.status(400).json({ error: 'Invalid payment_mode. Must be RAZORPAY or ADMin' });\n+  }\n+\n+  try {\n+    let result;\n+    await models.sequelize.transaction(async (t) => {\n+      if (payment.payment_mode === 'RAZORPAY') {\n+        const ok = await verifyPayment({\n+          order_id: payment.order_id,\n+          payment_id: payment.payment_id,\n+          signature: payment.razorpay_signature,\n+        });\n+        if (!ok) throw new Error('Invalid Razorpay signature');\n+      } else if (payment.payment_mode === 'DUMMY') {\n+        payment.payment_status = 'SUCCESS';\n+        payment.transaction_id = `TXN-DUMMY-${Date.now()}`;\n+        payment.payment_id = `PAY-DUMMY-${Date.now()}`;\n+        payment.order_id = `ORDER-DUMMY-${Date.now()}`;\n+      }\n+\n+      const seatsLeft = await sumSeats({\n+        models,\n+        schedule_id: bookedSeat.schedule_id,\n+        bookDate: bookedSeat.bookDate,\n+        transaction: t,\n+      });\n+      console.log('Seats left:', seatsLeft);\n+      if (seatsLeft < bookedSeat.booked_seat) {\n+        throw new Error(\n+          `Only ${seatsLeft} seat(s) left on ${bookedSeat.bookDate} for schedule ${bookedSeat.schedule_id}`\n+        );\n+      }\n+\n+      const [row, created] = await models.BookedSeat.findOrCreate({\n+        where: { schedule_id: bookedSeat.schedule_id, bookDate: bookedSeat.bookDate },\n+        defaults: { booked_seat: bookedSeat.booked_seat },\n+        transaction: t,\n+        lock: t.LOCK.UPDATE,\n+      });\n+      console.log('findOrCreate:', { created, row: row.toJSON() });\n+\n+      if (!row.isNewRecord) {\n+        await row.increment({ booked_seat: bookedSeat.booked_seat }, { transaction: t });\n+        console.log('After increment:', row.toJSON());\n+      }\n+\n+      const newBooking = await models.Booking.create(\n+        {\n+          ...booking,\n+          bookingStatus: 'CONFIRMED',\n+          paymentStatus: 'SUCCESS',\n+          bookingNo: booking.bookingNo || `BOOK-${uuidv4().slice(0, 8)}`,\n+        },\n+        { transaction: t }\n+      );\n+\n+      await models.Billing.create(\n+        { ...billing, user_id: booking.bookedUserId },\n+        { transaction: t }\n+      );\n+\n+      await createPaymentUtil(\n+        { ...payment, booking_id: newBooking.id, user_id: booking.bookedUserId },\n+        t\n+      );\n+\n+      await models.Passenger.bulkCreate(\n+        passengers.map((p) => ({\n+          bookingId: newBooking.id,\n+          title: p.title,\n+          name: p.name,\n+          dob: p.dob,\n+          age: p.age,\n+          type: p.type,\n+        })),\n+        { transaction: t }\n+      );\n+\n+      const updatedSeatCounts = [\n+        {\n+          schedule_id: bookedSeat.schedule_id,\n+          bookDate: bookedSeat.bookDate,\n+          seatsLeft: await sumSeats({\n+            models,\n+            schedule_id: bookedSeat.schedule_id,\n+            bookDate: bookedSeat.bookDate,\n+            transaction: t,\n+          }),\n+        },\n+      ];\n+      console.log('Updated seat counts:', updatedSeatCounts);\n+\n+      result = { bookingId: newBooking.id, updatedSeatCounts, bookingNo: newBooking.bookingNo };\n+    });\n+\n+    return res.status(201).json(result);\n+  } catch (err) {\n+    console.error('completeBooking error:', err);\n+    return res.status(400).json({ error: err.message });\n+  }\n+};\n+\n+\n+\n+exports.getBookings = async (req, res) => {\n+  try {\n+    const bookings = await models.Booking.findAll({\n+      include: [models.BookedSeat, models.Passenger, models.FlightSchedule, models.Payment],\n+    });\n+    const withBilling = await Promise.all(\n+      bookings.map(async (b) => ({\n+        ...b.toJSON(),\n+        billing: (await models.Billing.findOne({ where: { user_id: b.bookedUserId } }))?.toJSON() || null,\n+      }))\n+    );\n+    res.json(withBilling);\n+  } catch (err) {\n+    console.error(err);\n+    res.status(500).json({ error: 'Failed to fetch bookings' });\n+  }\n+};\n+\n+// Fetch single booking by ID\n+exports.getBookingById = async (req, res) => {\n+  const { id } = req.params;\n+  try {\n+    const booking = await models.Booking.findByPk(id, {\n+      include: [models.BookedSeat, models.Passenger, models.FlightSchedule, models.Payment],\n+    });\n+    if (!booking) return res.status(404).json({ error: 'Booking not found' });\n+    const billing = await models.Billing.findOne({ where: { user_id: booking.bookedUserId } });\n+    res.json({ ...booking.toJSON(), billing: billing?.toJSON() || null });\n+  } catch (err) {\n+    console.error(err);\n+    res.status(500).json({ error: 'Failed to fetch booking' });\n+  }\n+};\n+\n+// Basic create, update, delete (if needed)\n+exports.createBooking = async (req, res) => {\n+  try {\n+    const booking = await models.Booking.create(req.body);\n+    res.status(201).json(booking);\n+  } catch (err) {\n+    console.error(err);\n+    res.status(400).json({ error: err.message });\n+  }\n+};\n+\n+exports.updateBooking = async (req, res) => {\n+  const { id } = req.params;\n+  try {\n+    const booking = await models.Booking.findByPk(id);\n+    if (!booking) return res.status(404).json({ error: 'Booking not found' });\n+    await booking.update(req.body);\n+    res.json({ message: 'Booking updated', booking });\n+  } catch (err) {\n+    console.error(err);\n+    res.status(400).json({ error: err.message });\n+  }\n+};\n+\n+exports.deleteBooking = async (req, res) => {\n+  const { id } = req.params;\n+  let t;\n+  try {\n+    t = await models.sequelize.transaction();\n+    const booking = await models.Booking.findByPk(id, { transaction: t });\n+    if (!booking) {\n+      await t.rollback();\n+      return res.status(404).json({ error: 'Booking not found' });\n+    }\n+    await models.BookedSeat.destroy({ where: { schedule_id: booking.schedule_id }, transaction: t });\n+    await models.Passenger.destroy({ where: { bookingId: booking.id }, transaction: t });\n+    await models.Payment.destroy({ where: { booking_id: booking.id }, transaction: t });\n+    await booking.destroy({ transaction: t });\n+    await t.commit();\n+    res.json({ message: 'Booking deleted' });\n+  } catch (err) {\n+    if (t) await t.rollback();\n+    console.error(err);\n+    res.status(500).json({ error: err.message });\n+  }\n+};\n+\n+\n+\n+\n+exports.getBookingSummary = async (req, res) => {\n+  try {\n+    const { status } = req.query;\n+    const where = {};\n+    if (status && status !== \"All Booking\") {\n+      where.bookingStatus = status.toUpperCase();\n+    }\n+    // Sum number of passengers\n+    const totalSeats = await models.Booking.sum(\"noOfPassengers\", { where });\n+    // Count total bookings\n+    const totalBookings = await models.Booking.count({ where });\n+\n+    return res.json({ totalBookings, totalSeats: totalSeats || 0 });\n+  } catch (err) {\n+    console.error(\"Error fetching booking summary:\", err);\n+    res.status(500).json({ error: \"Server error\" });\n+  }\n+};\n\\ No newline at end of file\n"
                },
                {
                    "date": 1746000718382,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,471 +11,9 @@\n \n \n \n \n-/**\n- * Completes an IRCTC booking with integrated payment processing\n- */\n-exports.completeIrctcBooking = async (req, res) => {\n-  const { bookedSeat, booking, billing, passengers, payment } = req.body;\n \n-  // Log input\n-  console.log('completeIrctcBooking input:', { bookedSeat, booking, billing, passengers, payment });\n-\n-  // Validation\n-  if (\n-    !bookedSeat ||\n-    !booking ||\n-    !billing ||\n-    !payment ||\n-    !Array.isArray(passengers) ||\n-    passengers.length === 0\n-  ) {\n-    return res.status(400).json({ error: 'Missing required booking sections' });\n-  }\n-\n-  if (!dayjs(bookedSeat.bookDate, 'YYYY-MM-DD', true).isValid()) {\n-    return res.status(400).json({ error: 'Invalid bookDate format (YYYY-MM-DD)' });\n-  }\n-\n-  const bookingFields = [\n-    'pnr',\n-    'bookingNo',\n-    'contact_no',\n-    'email_id',\n-    'noOfPassengers',\n-    'totalFare',\n-    'bookedUserId',\n-    'schedule_id',\n-    'bookDate',\n-  ];\n-  for (const f of bookingFields) {\n-    if (!booking[f]) return res.status(400).json({ error: `Missing booking field: ${f}` });\n-  }\n-\n-  if (!billing.user_id) {\n-    return res.status(400).json({ error: 'Missing billing field: user_id' });\n-  }\n-\n-  const paymentFields = [\n-    'user_id',\n-    'payment_amount',\n-    'payment_mode',\n-    'transaction_id',\n-  ];\n-  for (const f of paymentFields) {\n-    if (!payment[f]) return res.status(400).json({ error: `Missing payment field: ${f}` });\n-  }\n-\n-  for (const p of passengers) {\n-    if (!p.name || !p.title || !p.type || typeof p.age !== 'number') {\n-      return res.status(400).json({ error: 'Missing passenger fields: name, title, type, age' });\n-    }\n-  }\n-\n-  if (!['IRCTC_GATEWAY', 'UPI', 'NET_BANKING'].includes(payment.payment_mode)) {\n-    return res.status(400).json({ error: 'Invalid payment_mode. Must be IRCTC_GATEWAY, UPI, or NET_BANKING' });\n-  }\n-\n-  try {\n-    let result;\n-    await models.sequelize.transaction(async (t) => {\n-      // Check available seats\n-      const seatsLeft = await sumSeats({\n-        models,\n-        schedule_id: bookedSeat.schedule_id,\n-        bookDate: bookedSeat.bookDate,\n-        transaction: t,\n-      });\n-      console.log('Seats left:', seatsLeft);\n-      if (seatsLeft < bookedSeat.booked_seat) {\n-        throw new Error(\n-          `Only ${seatsLeft} seat(s) left on ${bookedSeat.bookDate} for schedule ${bookedSeat.schedule_id}`\n-        );\n-      }\n-\n-      // Update or create booked seat record\n-      const [row, created] = await models.BookedSeat.findOrCreate({\n-        where: { schedule_id: bookedSeat.schedule_id, bookDate: bookedSeat.bookDate },\n-        defaults: { booked_seat: bookedSeat.booked_seat },\n-        transaction: t,\n-        lock: t.LOCK.UPDATE,\n-      });\n-      console.log('findOrCreate:', { created, row: row.toJSON() });\n-\n-      if (!row.isNewRecord) {\n-        await row.increment({ booked_seat: bookedSeat.booked_seat }, { transaction: t });\n-        console.log('After increment:', row.toJSON());\n-      }\n-\n-      // Process IRCTC payment (simplified for this example)\n-      const paymentStatus = 'SUCCESS'; // In real implementation, this would involve IRCTC payment gateway API\n-      const paymentDetails = {\n-        ...payment,\n-        payment_status: paymentStatus,\n-        payment_id: `IRCTC-PAY-${uuidv4().slice(0, 8)}`,\n-        order_id: `IRCTC-ORDER-${uuidv4().slice(0, 8)}`,\n-        pay_mode: payment.payment_mode, // Map to Booking model field\n-        pay_amt: payment.payment_amount.toString(), // Map to Booking model field\n-      };\n-\n-      // Create booking\n-      const newBooking = await models.Booking.create(\n-        {\n-          ...booking,\n-          bookingStatus: 'CONFIRMED',\n-          paymentStatus: paymentStatus,\n-          bookingNo: booking.bookingNo || `IRCTC-BOOK-${uuidv4().slice(0, 8)}`,\n-          pay_mode: payment.payment_mode,\n-          pay_amt: payment.payment_amount.toString(),\n-          paymentId: paymentDetails.payment_id,\n-          transactionId: payment.transaction_id,\n-        },\n-        { transaction: t }\n-      );\n-\n-      // Create billing record\n-      await models.Billing.create(\n-        { ...billing, user_id: booking.bookedUserId },\n-        { transaction: t }\n-      );\n-\n-      // Create payment record\n-      await models.Payment.create(\n-        { ...paymentDetails, booking_id: newBooking.id, user_id: booking.bookedUserId },\n-        { transaction: t }\n-      );\n-\n-      // Create passenger records\n-      await models.Passenger.bulkCreate(\n-        passengers.map((p) => ({\n-          bookingId: newBooking.id,\n-          title: p.title,\n-          name: p.name,\n-          dob: p.dob,\n-          age: p.age,\n-          type: p.type,\n-        })),\n-        { transaction: t }\n-      );\n-\n-      // Get updated seat counts\n-      const updatedSeatCounts = [\n-        {\n-          schedule_id: bookedSeat.schedule_id,\n-          bookDate: bookedSeat.bookDate,\n-          seatsLeft: await sumSeats({\n-            models,\n-            schedule_id: bookedSeat.schedule_id,\n-            bookDate: bookedSeat.bookDate,\n-            transaction: t,\n-          }),\n-        },\n-      ];\n-      console.log('Updated seat counts:', updatedSeatCounts);\n-\n-      result = { bookingId: newBooking.id, updatedSeatCounts, bookingNo: newBooking.bookingNo };\n-    });\n-\n-    return res.status(201).json(result);\n-  } catch (err) {\n-    console.error('completeIrctcBooking error:', err);\n-    return res.status(400).json({ error: err.message });\n-  }\n-};\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-exports.completeBooking = async (req, res) => {\n-  const { bookedSeat, booking, billing, payment, passengers } = req.body;\n-\n-  // Log input\n-  console.log('completeBooking input:', { bookedSeat, booking, billing, payment, passengers });\n-\n-  // Validation\n-  if (\n-    !bookedSeat ||\n-    !booking ||\n-    !billing ||\n-    !payment ||\n-    !Array.isArray(passengers) ||\n-    passengers.length === 0\n-  ) {\n-    return res.status(400).json({ error: 'Missing required booking sections' });\n-  }\n-  if (!dayjs(bookedSeat.bookDate, 'YYYY-MM-DD', true).isValid()) {\n-    return res.status(400).json({ error: 'Invalid bookDate format (YYYY-MM-DD)' });\n-  }\n-\n-  const bookingFields = [\n-    'pnr',\n-    'bookingNo',\n-    'contact_no',\n-    'email_id',\n-    'noOfPassengers',\n-    'totalFare',\n-    'bookedUserId',\n-    'schedule_id',\n-  ];\n-  for (const f of bookingFields) {\n-    if (!booking[f]) return res.status(400).json({ error: `Missing booking field: ${f}` });\n-  }\n-  if (!billing.user_id) {\n-    return res.status(400).json({ error: 'Missing billing field: user_id' });\n-  }\n-  const paymentFields = [\n-    'user_id',\n-    'payment_amount',\n-    'payment_status',\n-    'transaction_id',\n-    'payment_id',\n-    'payment_mode',\n-    'order_id',\n-  ];\n-  for (const f of paymentFields) {\n-    if (!payment[f]) return res.status(400).json({ error: `Missing payment field: ${f}` });\n-  }\n-\n-  for (const p of passengers) {\n-    if (!p.name || !p.title || !p.type || typeof p.age !== 'number') {\n-      return res.status(400).json({ error: 'Missing passenger fields: name, title, type, age' });\n-    }\n-  }\n-\n-  if (!['RAZORPAY', 'ADMIN'].includes(payment.payment_mode)) {\n-    return res.status(400).json({ error: 'Invalid payment_mode. Must be RAZORPAY or ADMin' });\n-  }\n-\n-  try {\n-    let result;\n-    await models.sequelize.transaction(async (t) => {\n-      if (payment.payment_mode === 'RAZORPAY') {\n-        const ok = await verifyPayment({\n-          order_id: payment.order_id,\n-          payment_id: payment.payment_id,\n-          signature: payment.razorpay_signature,\n-        });\n-        if (!ok) throw new Error('Invalid Razorpay signature');\n-      } else if (payment.payment_mode === 'DUMMY') {\n-        payment.payment_status = 'SUCCESS';\n-        payment.transaction_id = `TXN-DUMMY-${Date.now()}`;\n-        payment.payment_id = `PAY-DUMMY-${Date.now()}`;\n-        payment.order_id = `ORDER-DUMMY-${Date.now()}`;\n-      }\n-\n-      const seatsLeft = await sumSeats({\n-        models,\n-        schedule_id: bookedSeat.schedule_id,\n-        bookDate: bookedSeat.bookDate,\n-        transaction: t,\n-      });\n-      console.log('Seats left:', seatsLeft);\n-      if (seatsLeft < bookedSeat.booked_seat) {\n-        throw new Error(\n-          `Only ${seatsLeft} seat(s) left on ${bookedSeat.bookDate} for schedule ${bookedSeat.schedule_id}`\n-        );\n-      }\n-\n-      const [row, created] = await models.BookedSeat.findOrCreate({\n-        where: { schedule_id: bookedSeat.schedule_id, bookDate: bookedSeat.bookDate },\n-        defaults: { booked_seat: bookedSeat.booked_seat },\n-        transaction: t,\n-        lock: t.LOCK.UPDATE,\n-      });\n-      console.log('findOrCreate:', { created, row: row.toJSON() });\n-\n-      if (!row.isNewRecord) {\n-        await row.increment({ booked_seat: bookedSeat.booked_seat }, { transaction: t });\n-        console.log('After increment:', row.toJSON());\n-      }\n-\n-      const newBooking = await models.Booking.create(\n-        {\n-          ...booking,\n-          bookingStatus: 'CONFIRMED',\n-          paymentStatus: 'SUCCESS',\n-          bookingNo: booking.bookingNo || `BOOK-${uuidv4().slice(0, 8)}`,\n-        },\n-        { transaction: t }\n-      );\n-\n-      await models.Billing.create(\n-        { ...billing, user_id: booking.bookedUserId },\n-        { transaction: t }\n-      );\n-\n-      await createPaymentUtil(\n-        { ...payment, booking_id: newBooking.id, user_id: booking.bookedUserId },\n-        t\n-      );\n-\n-      await models.Passenger.bulkCreate(\n-        passengers.map((p) => ({\n-          bookingId: newBooking.id,\n-          title: p.title,\n-          name: p.name,\n-          dob: p.dob,\n-          age: p.age,\n-          type: p.type,\n-        })),\n-        { transaction: t }\n-      );\n-\n-      const updatedSeatCounts = [\n-        {\n-          schedule_id: bookedSeat.schedule_id,\n-          bookDate: bookedSeat.bookDate,\n-          seatsLeft: await sumSeats({\n-            models,\n-            schedule_id: bookedSeat.schedule_id,\n-            bookDate: bookedSeat.bookDate,\n-            transaction: t,\n-          }),\n-        },\n-      ];\n-      console.log('Updated seat counts:', updatedSeatCounts);\n-\n-      result = { bookingId: newBooking.id, updatedSeatCounts, bookingNo: newBooking.bookingNo };\n-    });\n-\n-    return res.status(201).json(result);\n-  } catch (err) {\n-    console.error('completeBooking error:', err);\n-    return res.status(400).json({ error: err.message });\n-  }\n-};\n-\n-\n-\n-exports.getBookings = async (req, res) => {\n-  try {\n-    const bookings = await models.Booking.findAll({\n-      include: [models.BookedSeat, models.Passenger, models.FlightSchedule, models.Payment],\n-    });\n-    const withBilling = await Promise.all(\n-      bookings.map(async (b) => ({\n-        ...b.toJSON(),\n-        billing: (await models.Billing.findOne({ where: { user_id: b.bookedUserId } }))?.toJSON() || null,\n-      }))\n-    );\n-    res.json(withBilling);\n-  } catch (err) {\n-    console.error(err);\n-    res.status(500).json({ error: 'Failed to fetch bookings' });\n-  }\n-};\n-\n-// Fetch single booking by ID\n-exports.getBookingById = async (req, res) => {\n-  const { id } = req.params;\n-  try {\n-    const booking = await models.Booking.findByPk(id, {\n-      include: [models.BookedSeat, models.Passenger, models.FlightSchedule, models.Payment],\n-    });\n-    if (!booking) return res.status(404).json({ error: 'Booking not found' });\n-    const billing = await models.Billing.findOne({ where: { user_id: booking.bookedUserId } });\n-    res.json({ ...booking.toJSON(), billing: billing?.toJSON() || null });\n-  } catch (err) {\n-    console.error(err);\n-    res.status(500).json({ error: 'Failed to fetch booking' });\n-  }\n-};\n-\n-// Basic create, update, delete (if needed)\n-exports.createBooking = async (req, res) => {\n-  try {\n-    const booking = await models.Booking.create(req.body);\n-    res.status(201).json(booking);\n-  } catch (err) {\n-    console.error(err);\n-    res.status(400).json({ error: err.message });\n-  }\n-};\n-\n-exports.updateBooking = async (req, res) => {\n-  const { id } = req.params;\n-  try {\n-    const booking = await models.Booking.findByPk(id);\n-    if (!booking) return res.status(404).json({ error: 'Booking not found' });\n-    await booking.update(req.body);\n-    res.json({ message: 'Booking updated', booking });\n-  } catch (err) {\n-    console.error(err);\n-    res.status(400).json({ error: err.message });\n-  }\n-};\n-\n-exports.deleteBooking = async (req, res) => {\n-  const { id } = req.params;\n-  let t;\n-  try {\n-    t = await models.sequelize.transaction();\n-    const booking = await models.Booking.findByPk(id, { transaction: t });\n-    if (!booking) {\n-      await t.rollback();\n-      return res.status(404).json({ error: 'Booking not found' });\n-    }\n-    await models.BookedSeat.destroy({ where: { schedule_id: booking.schedule_id }, transaction: t });\n-    await models.Passenger.destroy({ where: { bookingId: booking.id }, transaction: t });\n-    await models.Payment.destroy({ where: { booking_id: booking.id }, transaction: t });\n-    await booking.destroy({ transaction: t });\n-    await t.commit();\n-    res.json({ message: 'Booking deleted' });\n-  } catch (err) {\n-    if (t) await t.rollback();\n-    console.error(err);\n-    res.status(500).json({ error: err.message });\n-  }\n-};\n-\n-\n-\n-\n-exports.getBookingSummary = async (req, res) => {\n-  try {\n-    const { status } = req.query;\n-    const where = {};\n-    if (status && status !== \"All Booking\") {\n-      where.bookingStatus = status.toUpperCase();\n-    }\n-    // Sum number of passengers\n-    const totalSeats = await models.Booking.sum(\"noOfPassengers\", { where });\n-    // Count total bookings\n-    const totalBookings = await models.Booking.count({ where });\n-\n-    return res.json({ totalBookings, totalSeats: totalSeats || 0 });\n-  } catch (err) {\n-    console.error(\"Error fetching booking summary:\", err);\n-    res.status(500).json({ error: \"Server error\" });\n-  }\n-};\n-const models = require('../model');\n-const { sumSeats } = require('../utils/seatUtils');\n-const { verifyPayment } = require('../utils/razorpay');\n-const { createPaymentUtil } = require('./paymentController');\n-const { v4: uuidv4 } = require('uuid');\n-const dayjs = require('dayjs');\n-\n-\n-\n-\n-\n-\n-const models = require('../model');\n-const { sumSeats } = require('../utils/seatUtils');\n-const { v4: uuidv4 } = require('uuid');\n-const dayjs = require('dayjs');\n-\n-/**\n- * Completes an IRCTC booking with integrated payment processing\n- */\n exports.completeIrctcBooking = async (req, res) => {\n   const { bookedSeat, booking, billing, passengers, payment } = req.body;\n \n   // Log input\n"
                }
            ],
            "date": 1746000157164,
            "name": "Commit-0",
            "content": "const models = require('../model');\nconst { sumSeats } = require('../utils/seatUtils');\nconst { verifyPayment } = require('../utils/razorpay');\nconst { createPaymentUtil } = require('./paymentController');\nconst { v4: uuidv4 } = require('uuid');\nconst dayjs = require('dayjs');\n\n\n\n\n\n\n \nexports.completeIrctcBooking = async (req, res) => {\n  const { bookedSeat, booking, billing, passengers, payment } = req.body;\n\n  // Log input\n  console.log('completeIrctcBooking input:', { bookedSeat, booking, billing, passengers, payment });\n\n  // Validation\n  if (\n    !bookedSeat ||\n    !booking ||\n    !billing ||\n    !payment ||\n    !Array.isArray(passengers) ||\n    passengers.length === 0\n  ) {\n    return res.status(400).json({ error: 'Missing required booking sections' });\n  }\n\n  if (!dayjs(bookedSeat.bookDate, 'YYYY-MM-DD', true).isValid()) {\n    return res.status(400).json({ error: 'Invalid bookDate format (YYYY-MM-DD)' });\n  }\n\n  const bookingFields = [\n    'pnr',\n    'bookingNo',\n    'contact_no',\n    'email_id',\n    'noOfPassengers',\n    'totalFare',\n    'bookedUserId',\n    'schedule_id',\n  ];\n  for (const f of bookingFields) {\n    if (!booking[f]) return res.status(400).json({ error: `Missing booking field: ${f}` });\n  }\n\n  if (!billing.user_id) {\n    return res.status(400).json({ error: 'Missing billing field: user_id' });\n  }\n\n  const paymentFields = [\n    'user_id',\n    'payment_amount',\n    'payment_mode',\n    'transaction_id',\n  ];\n  for (const f of paymentFields) {\n    if (!payment[f]) return res.status(400).json({ error: `Missing payment field: ${f}` });\n  }\n\n  for (const p of passengers) {\n    if (!p.name || !p.title || !p.type || typeof p.age !== 'number') {\n      return res.status(400).json({ error: 'Missing passenger fields: name, title, type, age' });\n    }\n  }\n\n  if (!['IRCTC_GATEWAY', 'UPI', 'NET_BANKING'].includes(payment.payment_mode)) {\n    return res.status(400).json({ error: 'Invalid payment_mode. Must be IRCTC_GATEWAY, UPI, or NET_BANKING' });\n  }\n\n  try {\n    let result;\n    await models.sequelize.transaction(async (t) => {\n      // Check available seats\n      const seatsLeft = await sumSeats({\n        models,\n        schedule_id: bookedSeat.schedule_id,\n        bookDate: bookedSeat.bookDate,\n        transaction: t,\n      });\n      console.log('Seats left:', seatsLeft);\n      if (seatsLeft < bookedSeat.booked_seat) {\n        throw new Error(\n          `Only ${seatsLeft} seat(s) left on ${bookedSeat.bookDate} for schedule ${bookedSeat.schedule_id}`\n        );\n      }\n\n      // Update or create booked seat record\n      const [row, created] = await models.BookedSeat.findOrCreate({\n        where: { schedule_id: bookedSeat.schedule_id, bookDate: bookedSeat.bookDate },\n        defaults: { booked_seat: bookedSeat.booked_seat },\n        transaction: t,\n        lock: t.LOCK.UPDATE,\n      });\n      console.log('findOrCreate:', { created, row: row.toJSON() });\n\n      if (!row.isNewRecord) {\n        await row.increment({ booked_seat: bookedSeat.booked_seat }, { transaction: t });\n        console.log('After increment:', row.toJSON());\n      }\n\n      // Process IRCTC payment (simplified for this example)\n      const paymentStatus = 'SUCCESS'; // In real implementation, this would involve IRCTC payment gateway API\n      const paymentDetails = {\n        ...payment,\n        payment_status: paymentStatus,\n        payment_id: `IRCTC-PAY-${uuidv4().slice(0, 8)}`,\n        order_id: `IRCTC-ORDER-${uuidv4().slice(0, 8)}`,\n      };\n\n      // Create booking\n      const newBooking = await models.Booking.create(\n        {\n          ...booking,\n          bookingStatus: 'CONFIRMED',\n          paymentStatus: paymentStatus,\n          bookingNo: booking.bookingNo || `IRCTC-BOOK-${uuidv4().slice(0, 8)}`,\n        },\n        { transaction: t }\n      );\n\n      // Create billing record\n      await models.Billing.create(\n        { ...billing, user_id: booking.bookedUserId },\n        { transaction: t }\n      );\n\n      // Create payment record\n      await models.Payment.create(\n        { ...paymentDetails, booking_id: newBooking.id, user_id: booking.bookedUserId },\n        { transaction: t }\n      );\n\n      // Create passenger records\n      await models.Passenger.bulkCreate(\n        passengers.map((p) => ({\n          bookingId: newBooking.id,\n          title: p.title,\n          name: p.name,\n          dob: p.dob,\n          age: p.age,\n          type: p.type,\n        })),\n        { transaction: t }\n      );\n\n      // Get updated seat counts\n      const updatedSeatCounts = [\n        {\n          schedule_id: bookedSeat.schedule_id,\n          bookDate: bookedSeat.bookDate,\n          seatsLeft: await sumSeats({\n            models,\n            schedule_id: bookedSeat.schedule_id,\n            bookDate: bookedSeat.bookDate,\n            transaction: t,\n          }),\n        },\n      ];\n      console.log('Updated seat counts:', updatedSeatCounts);\n\n      result = { bookingId: newBooking.id, updatedSeatCounts, bookingNo: newBooking.bookingNo };\n    });\n\n    return res.status(201).json(result);\n  } catch (err) {\n    console.error('completeIrctcBooking error:', err);\n    return res.status(400).json({ error: err.message });\n  }\n};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nexports.completeBooking = async (req, res) => {\n  const { bookedSeat, booking, billing, payment, passengers } = req.body;\n\n  // Log input\n  console.log('completeBooking input:', { bookedSeat, booking, billing, payment, passengers });\n\n  // Validation\n  if (\n    !bookedSeat ||\n    !booking ||\n    !billing ||\n    !payment ||\n    !Array.isArray(passengers) ||\n    passengers.length === 0\n  ) {\n    return res.status(400).json({ error: 'Missing required booking sections' });\n  }\n  if (!dayjs(bookedSeat.bookDate, 'YYYY-MM-DD', true).isValid()) {\n    return res.status(400).json({ error: 'Invalid bookDate format (YYYY-MM-DD)' });\n  }\n\n  const bookingFields = [\n    'pnr',\n    'bookingNo',\n    'contact_no',\n    'email_id',\n    'noOfPassengers',\n    'totalFare',\n    'bookedUserId',\n    'schedule_id',\n  ];\n  for (const f of bookingFields) {\n    if (!booking[f]) return res.status(400).json({ error: `Missing booking field: ${f}` });\n  }\n  if (!billing.user_id) {\n    return res.status(400).json({ error: 'Missing billing field: user_id' });\n  }\n  const paymentFields = [\n    'user_id',\n    'payment_amount',\n    'payment_status',\n    'transaction_id',\n    'payment_id',\n    'payment_mode',\n    'order_id',\n  ];\n  for (const f of paymentFields) {\n    if (!payment[f]) return res.status(400).json({ error: `Missing payment field: ${f}` });\n  }\n\n  for (const p of passengers) {\n    if (!p.name || !p.title || !p.type || typeof p.age !== 'number') {\n      return res.status(400).json({ error: 'Missing passenger fields: name, title, type, age' });\n    }\n  }\n\n  if (!['RAZORPAY', 'ADMIN'].includes(payment.payment_mode)) {\n    return res.status(400).json({ error: 'Invalid payment_mode. Must be RAZORPAY or ADMin' });\n  }\n\n  try {\n    let result;\n    await models.sequelize.transaction(async (t) => {\n      if (payment.payment_mode === 'RAZORPAY') {\n        const ok = await verifyPayment({\n          order_id: payment.order_id,\n          payment_id: payment.payment_id,\n          signature: payment.razorpay_signature,\n        });\n        if (!ok) throw new Error('Invalid Razorpay signature');\n      } else if (payment.payment_mode === 'DUMMY') {\n        payment.payment_status = 'SUCCESS';\n        payment.transaction_id = `TXN-DUMMY-${Date.now()}`;\n        payment.payment_id = `PAY-DUMMY-${Date.now()}`;\n        payment.order_id = `ORDER-DUMMY-${Date.now()}`;\n      }\n\n      const seatsLeft = await sumSeats({\n        models,\n        schedule_id: bookedSeat.schedule_id,\n        bookDate: bookedSeat.bookDate,\n        transaction: t,\n      });\n      console.log('Seats left:', seatsLeft);\n      if (seatsLeft < bookedSeat.booked_seat) {\n        throw new Error(\n          `Only ${seatsLeft} seat(s) left on ${bookedSeat.bookDate} for schedule ${bookedSeat.schedule_id}`\n        );\n      }\n\n      const [row, created] = await models.BookedSeat.findOrCreate({\n        where: { schedule_id: bookedSeat.schedule_id, bookDate: bookedSeat.bookDate },\n        defaults: { booked_seat: bookedSeat.booked_seat },\n        transaction: t,\n        lock: t.LOCK.UPDATE,\n      });\n      console.log('findOrCreate:', { created, row: row.toJSON() });\n\n      if (!row.isNewRecord) {\n        await row.increment({ booked_seat: bookedSeat.booked_seat }, { transaction: t });\n        console.log('After increment:', row.toJSON());\n      }\n\n      const newBooking = await models.Booking.create(\n        {\n          ...booking,\n          bookingStatus: 'CONFIRMED',\n          paymentStatus: 'SUCCESS',\n          bookingNo: booking.bookingNo || `BOOK-${uuidv4().slice(0, 8)}`,\n        },\n        { transaction: t }\n      );\n\n      await models.Billing.create(\n        { ...billing, user_id: booking.bookedUserId },\n        { transaction: t }\n      );\n\n      await createPaymentUtil(\n        { ...payment, booking_id: newBooking.id, user_id: booking.bookedUserId },\n        t\n      );\n\n      await models.Passenger.bulkCreate(\n        passengers.map((p) => ({\n          bookingId: newBooking.id,\n          title: p.title,\n          name: p.name,\n          dob: p.dob,\n          age: p.age,\n          type: p.type,\n        })),\n        { transaction: t }\n      );\n\n      const updatedSeatCounts = [\n        {\n          schedule_id: bookedSeat.schedule_id,\n          bookDate: bookedSeat.bookDate,\n          seatsLeft: await sumSeats({\n            models,\n            schedule_id: bookedSeat.schedule_id,\n            bookDate: bookedSeat.bookDate,\n            transaction: t,\n          }),\n        },\n      ];\n      console.log('Updated seat counts:', updatedSeatCounts);\n\n      result = { bookingId: newBooking.id, updatedSeatCounts, bookingNo: newBooking.bookingNo };\n    });\n\n    return res.status(201).json(result);\n  } catch (err) {\n    console.error('completeBooking error:', err);\n    return res.status(400).json({ error: err.message });\n  }\n};\n\n\n\nexports.getBookings = async (req, res) => {\n  try {\n    const bookings = await models.Booking.findAll({\n      include: [models.BookedSeat, models.Passenger, models.FlightSchedule, models.Payment],\n    });\n    const withBilling = await Promise.all(\n      bookings.map(async (b) => ({\n        ...b.toJSON(),\n        billing: (await models.Billing.findOne({ where: { user_id: b.bookedUserId } }))?.toJSON() || null,\n      }))\n    );\n    res.json(withBilling);\n  } catch (err) {\n    console.error(err);\n    res.status(500).json({ error: 'Failed to fetch bookings' });\n  }\n};\n\n// Fetch single booking by ID\nexports.getBookingById = async (req, res) => {\n  const { id } = req.params;\n  try {\n    const booking = await models.Booking.findByPk(id, {\n      include: [models.BookedSeat, models.Passenger, models.FlightSchedule, models.Payment],\n    });\n    if (!booking) return res.status(404).json({ error: 'Booking not found' });\n    const billing = await models.Billing.findOne({ where: { user_id: booking.bookedUserId } });\n    res.json({ ...booking.toJSON(), billing: billing?.toJSON() || null });\n  } catch (err) {\n    console.error(err);\n    res.status(500).json({ error: 'Failed to fetch booking' });\n  }\n};\n\n// Basic create, update, delete (if needed)\nexports.createBooking = async (req, res) => {\n  try {\n    const booking = await models.Booking.create(req.body);\n    res.status(201).json(booking);\n  } catch (err) {\n    console.error(err);\n    res.status(400).json({ error: err.message });\n  }\n};\n\nexports.updateBooking = async (req, res) => {\n  const { id } = req.params;\n  try {\n    const booking = await models.Booking.findByPk(id);\n    if (!booking) return res.status(404).json({ error: 'Booking not found' });\n    await booking.update(req.body);\n    res.json({ message: 'Booking updated', booking });\n  } catch (err) {\n    console.error(err);\n    res.status(400).json({ error: err.message });\n  }\n};\n\nexports.deleteBooking = async (req, res) => {\n  const { id } = req.params;\n  let t;\n  try {\n    t = await models.sequelize.transaction();\n    const booking = await models.Booking.findByPk(id, { transaction: t });\n    if (!booking) {\n      await t.rollback();\n      return res.status(404).json({ error: 'Booking not found' });\n    }\n    await models.BookedSeat.destroy({ where: { schedule_id: booking.schedule_id }, transaction: t });\n    await models.Passenger.destroy({ where: { bookingId: booking.id }, transaction: t });\n    await models.Payment.destroy({ where: { booking_id: booking.id }, transaction: t });\n    await booking.destroy({ transaction: t });\n    await t.commit();\n    res.json({ message: 'Booking deleted' });\n  } catch (err) {\n    if (t) await t.rollback();\n    console.error(err);\n    res.status(500).json({ error: err.message });\n  }\n};\n\n\n\n\nexports.getBookingSummary = async (req, res) => {\n  try {\n    const { status } = req.query;\n    const where = {};\n    if (status && status !== \"All Booking\") {\n      where.bookingStatus = status.toUpperCase();\n    }\n    // Sum number of passengers\n    const totalSeats = await models.Booking.sum(\"noOfPassengers\", { where });\n    // Count total bookings\n    const totalBookings = await models.Booking.count({ where });\n\n    return res.json({ totalBookings, totalSeats: totalSeats || 0 });\n  } catch (err) {\n    console.error(\"Error fetching booking summary:\", err);\n    res.status(500).json({ error: \"Server error\" });\n  }\n};"
        }
    ]
}